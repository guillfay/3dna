from RotTable import RotTable
from Traj3D import Traj3D
from genetique import Genetique
from random import seed
import pytest

# Seed pour la reproductibilité des résultats de test
seed(91)

# Initialisation des paramètres de test
seq=''.join([line.rstrip('\n') for line in open(r"../data/plasmid_8k.fasta")][1:])
methode_utilisee='test'
nbr_generation_max=1
N=1
probabilite_mutation_initiale=0.5
probabilite_mutation_finale=0.6
relier=1

rottable=RotTable()
energie_memo={'a':0}


def test_energie():
    # Test n°1
    test_genetique=Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, relier)
    assert test_genetique.energie(rottable)==5990.480078776554

    # Test n°2
    # relier=0
    test_genetique=Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 0)
    assert test_genetique.energie(rottable)==5987.480078776554

def test_generation_individu():
    # Test
    test_genetique=Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1)
    assert test_genetique.generation_individu().rot_table=={'AA': [35.63064717352244, 7.261638565478585, -154, 0.06, 0.6, 0], 'AC': [34.296144138480024, 0.19552615205753687, 143, 1.3, 5, 0], 'AG': [28.615674357688917, 7.794879960404526, 2, 1.5, 3, 0], 'AT': [31.480324763757697, 1.8547142629408107, 0, 1.1, 2, 0], 'CA': [34.60429993978977, -3.997928971055373, -64, 0.9, 34, 0], 'CC': [33.65211308709301, 1.6928938979441703, -57, 0.07, 2.1, 0], 'CG': [28.85647982435987, 6.7774305329145434, 0, 1.1, 1.5, 0], 'CT': [28.615674357688917, 7.794879960404526, -2, 1.5, 3, 0], 'GA': [37.004660969074216, 8.579804796401826, 120, 0.9, 6, 0], 'GC': [40.01757754299171, 4.819164817979876, 180, 1.2, 1.275, 0], 'GG': [33.65211308709301, 1.6928938979441703, 57, 0.07, 2.1, 0], 'GT': [34.296144138480024, 0.19552615205753687, -143, 1.3, 5, 0], 'TA': [36.39964281394382, 0.8666550782562791, 0, 1.1, 2, 0], 'TC': [37.004660969074216, 8.579804796401826, -120, 0.9, 6, 0], 'TG': [34.60429993978977, -3.997928971055373, 64, 0.9, 34, 0], 'TT': [35.63064717352244, 7.261638565478585, 154, 0.06, 0.6, 0]}

def test_generation_population():
    # Test
    test_genetique=Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1)
    assert test_genetique.generation_population()[0].rot_table=={'AA': [35.6036685387392, 7.154256008357956, -154, 0.06, 0.6, 0], 'AC': [33.37055411144292, -0.38896540638924737, 143, 1.3, 5, 0], 'AG': [27.22629946940839, 9.720438820960066, 2, 1.5, 3, 0], 'AT': [31.657730578759757, 1.2880766518844493, 0, 1.1, 2, 0], 'CA': [34.38426360384732, -7.732477856809748, -64, 0.9, 34, 0], 'CC': [33.657801965421285, 2.6843319398880796, -57, 0.07, 2.1, 0], 'CG': [29.263855665494273, 7.442562343410615, 0, 1.1, 1.5, 0], 'CT': [27.22629946940839, 9.720438820960066, -2, 1.5, 3, 0], 'GA': [36.99830518164201, 4.074943988239176, 120, 0.9, 6, 0], 'GC': [39.98859901253395, 5.127179966128883, 180, 1.2, 1.275, 0], 'GG': [33.657801965421285, 2.6843319398880796, 57, 0.07, 2.1, 0], 'GT': [33.37055411144292, -0.38896540638924737, -143, 1.3, 5, 0], 'TA': [36.11648169368743, 0.8026627366834209, 0, 1.1, 2, 0], 'TC': [36.99830518164201, 4.074943988239176, -120, 0.9, 6, 0], 'TG': [34.38426360384732, -7.732477856809748, 64, 0.9, 34, 0], 'TT': [35.6036685387392, 7.154256008357956, 154, 0.06, 0.6, 0]}

def test_selection_elitisme():
    # Test
    test_genetique=Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1)
    assert test_genetique.selection_elitisme([RotTable(), RotTable()])[0].rot_table=={'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}

def test_selection_roulette():
    # Test
    assert [x.rot_table for x in Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).selection_roulette([RotTable(), RotTable()])]==[{'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}]
    
def test_selection_rang():
    # Test
    assert [x.rot_table for x in Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).selection_rang([RotTable(), RotTable()])]==[{'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}]

def test_selection_tournoi():
    assert [x.rot_table for x in Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).selection_tournoi([RotTable(), RotTable()])]==[{'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}]
    assert [x.rot_table for x in Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).selection_tournoi([RotTable(), RotTable(), RotTable(),RotTable(),RotTable(),RotTable()])]==[{'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}, {'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}, {'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}]
    assert [x.rot_table for x in Genetique(seq, 'test_tournoi_p', nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).selection_tournoi([RotTable(), RotTable(),RotTable(),RotTable()])]==[{'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}, {'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}]
    assert [x.rot_table for x in Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).selection_tournoi([RotTable(), RotTable()])]==[{'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}]

def test_croisement():
    assert [x.rot_table for x in Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).croisement(RotTable(),RotTable())]==[{'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}, {'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}]

def test_croisement_N_points():
    assert [x.rot_table for x in Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).croisement_N_points(RotTable(),RotTable(),1)]==[{'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}, {'AA': [35.62, 7.2, -154, 0.06, 0.6, 0], 'AC': [34.4, 1.1, 143, 1.3, 5, 0], 'AG': [27.7, 8.4, 2, 1.5, 3, 0], 'AT': [31.5, 2.6, 0, 1.1, 2, 0], 'CA': [34.5, 3.5, -64, 0.9, 34, 0], 'CC': [33.67, 2.1, -57, 0.07, 2.1, 0], 'CG': [29.8, 6.7, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [36.9, 5.3, 120, 0.9, 6, 0], 'GC': [40, 5, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36, 0.9, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}]
    with pytest.raises(Exception):
        Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1).croisement_N_points(RotTable(),RotTable(),1000)

def test_mutation():
    # Test
    test_genetique=Genetique(seq, methode_utilisee, nbr_generation_max,N, probabilite_mutation_initiale, probabilite_mutation_finale, 1)
    assert test_genetique.mutation(RotTable())==None

def test_executer():
    assert Genetique(seq, 'elitisme', nbr_generation_max,5, probabilite_mutation_initiale, probabilite_mutation_finale, 1).executer().rot_table=={'AA': [35.637148786882314, 6.8535840088494595, -154, 0.06, 0.6, 0], 'AC': [34.08484045231426, -0.5276798994008918, 143, 1.3, 5, 0], 'AG': [28.063170109364425, 8.953195927458822, 2, 1.5, 3, 0], 'AT': [31.41941383230371, 3.372825608970248, 0, 1.1, 2, 0], 'CA': [34.50413280353943, 19.440600210937838, -64, 0.9, 34, 0], 'CC': [33.60814686974824, 2.3379544860691657, -57, 0.07, 2.1, 0], 'CG': [29.794108330616165, 6.839427839511582, 0, 1.1, 1.5, 0], 'CT': [28.063170109364425, 8.953195927458822, -2, 1.5, 3, 0], 'GA': [37.03996046468239, 6.224307078965414, 120, 0.9, 6, 0], 'GC': [39.80075610804069, 4.503958576730224, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [35.41755041801166, 0.3762086635608469, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.637148786882314, 6.8535840088494595, 154, 0.06, 0.6, 0]}
    assert Genetique(seq, 'roulette', nbr_generation_max,5, probabilite_mutation_initiale, probabilite_mutation_finale, 1).executer().rot_table=={'AA': [35.63301004098447, 7.655720063680828, -154, 0.06, 0.6, 0], 'AC': [34.59519125429962, -0.3753586204194912, 143, 1.3, 5, 0], 'AG': [27.18462168293714, 8.85333334680688, 2, 1.5, 3, 0], 'AT': [31.834160551613348, 3.038063766440815, 0, 1.1, 2, 0], 'CA': [34.987159004575076, -0.4100348181745752, -64, 0.9, 34, 0], 'CC': [33.663493812427575, 1.7490771935701546, -57, 0.07, 2.1, 0], 'CG': [29.86403885436769, 6.335242724636218, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [37.15652808631537, 4.579825314908206, 120, 0.9, 6, 0], 'GC': [40.14515660067383, 5.51874309229285, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.59519125429962, -0.3753586204194912, -143, 1.3, 5, 0], 'TA': [36.686054580364704, 1.2473929552415925, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.63301004098447, 7.655720063680828, 154, 0.06, 0.6, 0]}
    assert Genetique(seq, 'rang', nbr_generation_max,5, probabilite_mutation_initiale, probabilite_mutation_finale, 1).executer().rot_table=={'AA': [35.61495137643946, 7.218116170571092, -154, 0.06, 0.6, 0], 'AC': [34.151007553296274, 0.048649959458667014, 143, 1.3, 5, 0], 'AG': [27.233749822639705, 8.375432526044834, 2, 1.5, 3, 0], 'AT': [31.397569919102008, 2.9728655663501082, 0, 1.1, 2, 0], 'CA': [34.682278201058864, -14.890172738288097, -64, 0.9, 34, 0], 'CC': [33.66628261288755, 1.6288511271697148, -57, 0.07, 2.1, 0], 'CG': [29.893617775575347, 6.6805926380351455, 0, 1.1, 1.5, 0], 'CT': [27.233749822639705, 8.375432526044834, -2, 1.5, 3, 0], 'GA': [36.451856607060286, 3.6639687696894923, 120, 0.9, 6, 0], 'GC': [39.74595997625145, 5.150873802323293, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [35.43989804894748, 0.4637204229617568, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.682278201058864, -14.890172738288097, 64, 0.9, 34, 0], 'TT': [35.61495137643946, 7.218116170571092, 154, 0.06, 0.6, 0]}
    assert Genetique(seq, 'tournoi', nbr_generation_max,5, probabilite_mutation_initiale, probabilite_mutation_finale, 1).executer().rot_table=={'AA': [35.59703325086951, 7.473074797027458, -154, 0.06, 0.6, 0], 'AC': [33.66236494108268, 3.217199382085886, 143, 1.3, 5, 0], 'AG': [28.2705366452746, 8.675918070605476, 2, 1.5, 3, 0], 'AT': [31.188865423176818, 2.1432745647522626, 0, 1.1, 2, 0], 'CA': [34.101912756238264, -17.058565760964385, -64, 0.9, 34, 0], 'CC': [33.68213360081089, 1.7313923130674076, -57, 0.07, 2.1, 0], 'CG': [30.25865241796209, 6.497512015604909, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [37.60891778895093, 3.3300488791184715, 120, 0.9, 6, 0], 'GC': [40.526110929127675, 4.178259832613605, 180, 1.2, 1.275, 0], 'GG': [33.68213360081089, 1.7313923130674076, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [35.75979608718118, 1.7514469611451267, 0, 1.1, 2, 0], 'TC': [37.60891778895093, 3.3300488791184715, -120, 0.9, 6, 0], 'TG': [34.101912756238264, -17.058565760964385, 64, 0.9, 34, 0], 'TT': [35.59703325086951, 7.473074797027458, 154, 0.06, 0.6, 0]}
    assert Genetique(seq, 'else', nbr_generation_max,5, probabilite_mutation_initiale, probabilite_mutation_finale, 1).executer().rot_table=={'AA': [35.643226338104455, 7.174343557328294, -154, 0.06, 0.6, 0], 'AC': [35.24160211176924, 2.8492226702135386, 143, 1.3, 5, 0], 'AG': [27.391256456213693, 9.119229955845023, 2, 1.5, 3, 0], 'AT': [31.078948311364414, 3.139878152146206, 0, 1.1, 2, 0], 'CA': [34.45892356366845, 16.982949099920447, -64, 0.9, 34, 0], 'CC': [33.687158284444614, 2.275346988751976, -57, 0.07, 2.1, 0], 'CG': [29.6299328099767, 5.900210210959276, 0, 1.1, 1.5, 0], 'CT': [27.7, 8.4, -2, 1.5, 3, 0], 'GA': [37.24621390864374, 8.649833892733625, 120, 0.9, 6, 0], 'GC': [39.35586066659837, 4.673929471035289, 180, 1.2, 1.275, 0], 'GG': [33.67, 2.1, 57, 0.07, 2.1, 0], 'GT': [34.4, 1.1, -143, 1.3, 5, 0], 'TA': [36.12185232764634, 1.5804327715051045, 0, 1.1, 2, 0], 'TC': [36.9, 5.3, -120, 0.9, 6, 0], 'TG': [34.5, 3.5, 64, 0.9, 34, 0], 'TT': [35.62, 7.2, 154, 0.06, 0.6, 0]}
